/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package it.bitrock.demoluxottica.models.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DiagnosticReportRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4481847057913942099L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DiagnosticReportRecord\",\"namespace\":\"it.bitrock.demoluxottica.models.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"subject\",\"type\":\"string\"},{\"name\":\"encounter\",\"type\":\"string\"},{\"name\":\"effectiveDateTime\",\"type\":\"long\",\"logicalType\":\"date\"},{\"name\":\"performers\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DiagnosticReportRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DiagnosticReportRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DiagnosticReportRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DiagnosticReportRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DiagnosticReportRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DiagnosticReportRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DiagnosticReportRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DiagnosticReportRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DiagnosticReportRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence status;
  private java.lang.CharSequence code;
  private java.lang.CharSequence subject;
  private java.lang.CharSequence encounter;
  private long effectiveDateTime;
  private java.lang.CharSequence performers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DiagnosticReportRecord() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param status The new value for status
   * @param code The new value for code
   * @param subject The new value for subject
   * @param encounter The new value for encounter
   * @param effectiveDateTime The new value for effectiveDateTime
   * @param performers The new value for performers
   */
  public DiagnosticReportRecord(java.lang.CharSequence id, java.lang.CharSequence status, java.lang.CharSequence code, java.lang.CharSequence subject, java.lang.CharSequence encounter, java.lang.Long effectiveDateTime, java.lang.CharSequence performers) {
    this.id = id;
    this.status = status;
    this.code = code;
    this.subject = subject;
    this.encounter = encounter;
    this.effectiveDateTime = effectiveDateTime;
    this.performers = performers;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return status;
    case 2: return code;
    case 3: return subject;
    case 4: return encounter;
    case 5: return effectiveDateTime;
    case 6: return performers;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: status = (java.lang.CharSequence)value$; break;
    case 2: code = (java.lang.CharSequence)value$; break;
    case 3: subject = (java.lang.CharSequence)value$; break;
    case 4: encounter = (java.lang.CharSequence)value$; break;
    case 5: effectiveDateTime = (java.lang.Long)value$; break;
    case 6: performers = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'subject' field.
   * @return The value of the 'subject' field.
   */
  public java.lang.CharSequence getSubject() {
    return subject;
  }


  /**
   * Sets the value of the 'subject' field.
   * @param value the value to set.
   */
  public void setSubject(java.lang.CharSequence value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'encounter' field.
   * @return The value of the 'encounter' field.
   */
  public java.lang.CharSequence getEncounter() {
    return encounter;
  }


  /**
   * Sets the value of the 'encounter' field.
   * @param value the value to set.
   */
  public void setEncounter(java.lang.CharSequence value) {
    this.encounter = value;
  }

  /**
   * Gets the value of the 'effectiveDateTime' field.
   * @return The value of the 'effectiveDateTime' field.
   */
  public long getEffectiveDateTime() {
    return effectiveDateTime;
  }


  /**
   * Sets the value of the 'effectiveDateTime' field.
   * @param value the value to set.
   */
  public void setEffectiveDateTime(long value) {
    this.effectiveDateTime = value;
  }

  /**
   * Gets the value of the 'performers' field.
   * @return The value of the 'performers' field.
   */
  public java.lang.CharSequence getPerformers() {
    return performers;
  }


  /**
   * Sets the value of the 'performers' field.
   * @param value the value to set.
   */
  public void setPerformers(java.lang.CharSequence value) {
    this.performers = value;
  }

  /**
   * Creates a new DiagnosticReportRecord RecordBuilder.
   * @return A new DiagnosticReportRecord RecordBuilder
   */
  public static it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder newBuilder() {
    return new it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder();
  }

  /**
   * Creates a new DiagnosticReportRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DiagnosticReportRecord RecordBuilder
   */
  public static it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder newBuilder(it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder other) {
    if (other == null) {
      return new it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder();
    } else {
      return new it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder(other);
    }
  }

  /**
   * Creates a new DiagnosticReportRecord RecordBuilder by copying an existing DiagnosticReportRecord instance.
   * @param other The existing instance to copy.
   * @return A new DiagnosticReportRecord RecordBuilder
   */
  public static it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder newBuilder(it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord other) {
    if (other == null) {
      return new it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder();
    } else {
      return new it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for DiagnosticReportRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DiagnosticReportRecord>
    implements org.apache.avro.data.RecordBuilder<DiagnosticReportRecord> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence status;
    private java.lang.CharSequence code;
    private java.lang.CharSequence subject;
    private java.lang.CharSequence encounter;
    private long effectiveDateTime;
    private java.lang.CharSequence performers;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.code)) {
        this.code = data().deepCopy(fields()[2].schema(), other.code);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.subject)) {
        this.subject = data().deepCopy(fields()[3].schema(), other.subject);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.encounter)) {
        this.encounter = data().deepCopy(fields()[4].schema(), other.encounter);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.effectiveDateTime)) {
        this.effectiveDateTime = data().deepCopy(fields()[5].schema(), other.effectiveDateTime);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.performers)) {
        this.performers = data().deepCopy(fields()[6].schema(), other.performers);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing DiagnosticReportRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.code)) {
        this.code = data().deepCopy(fields()[2].schema(), other.code);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.subject)) {
        this.subject = data().deepCopy(fields()[3].schema(), other.subject);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.encounter)) {
        this.encounter = data().deepCopy(fields()[4].schema(), other.encounter);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.effectiveDateTime)) {
        this.effectiveDateTime = data().deepCopy(fields()[5].schema(), other.effectiveDateTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.performers)) {
        this.performers = data().deepCopy(fields()[6].schema(), other.performers);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder clearStatus() {
      status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.code = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder clearCode() {
      code = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubject() {
      return subject;
    }


    /**
      * Sets the value of the 'subject' field.
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder setSubject(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.subject = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'subject' field.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'encounter' field.
      * @return The value.
      */
    public java.lang.CharSequence getEncounter() {
      return encounter;
    }


    /**
      * Sets the value of the 'encounter' field.
      * @param value The value of 'encounter'.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder setEncounter(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.encounter = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'encounter' field has been set.
      * @return True if the 'encounter' field has been set, false otherwise.
      */
    public boolean hasEncounter() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'encounter' field.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder clearEncounter() {
      encounter = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'effectiveDateTime' field.
      * @return The value.
      */
    public long getEffectiveDateTime() {
      return effectiveDateTime;
    }


    /**
      * Sets the value of the 'effectiveDateTime' field.
      * @param value The value of 'effectiveDateTime'.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder setEffectiveDateTime(long value) {
      validate(fields()[5], value);
      this.effectiveDateTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'effectiveDateTime' field has been set.
      * @return True if the 'effectiveDateTime' field has been set, false otherwise.
      */
    public boolean hasEffectiveDateTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'effectiveDateTime' field.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder clearEffectiveDateTime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'performers' field.
      * @return The value.
      */
    public java.lang.CharSequence getPerformers() {
      return performers;
    }


    /**
      * Sets the value of the 'performers' field.
      * @param value The value of 'performers'.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder setPerformers(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.performers = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'performers' field has been set.
      * @return True if the 'performers' field has been set, false otherwise.
      */
    public boolean hasPerformers() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'performers' field.
      * @return This builder.
      */
    public it.bitrock.demoluxottica.models.avro.DiagnosticReportRecord.Builder clearPerformers() {
      performers = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DiagnosticReportRecord build() {
      try {
        DiagnosticReportRecord record = new DiagnosticReportRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.code = fieldSetFlags()[2] ? this.code : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.subject = fieldSetFlags()[3] ? this.subject : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.encounter = fieldSetFlags()[4] ? this.encounter : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.effectiveDateTime = fieldSetFlags()[5] ? this.effectiveDateTime : (java.lang.Long) defaultValue(fields()[5]);
        record.performers = fieldSetFlags()[6] ? this.performers : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DiagnosticReportRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<DiagnosticReportRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DiagnosticReportRecord>
    READER$ = (org.apache.avro.io.DatumReader<DiagnosticReportRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.status);

    out.writeString(this.code);

    out.writeString(this.subject);

    out.writeString(this.encounter);

    out.writeLong(this.effectiveDateTime);

    out.writeString(this.performers);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);

      this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);

      this.subject = in.readString(this.subject instanceof Utf8 ? (Utf8)this.subject : null);

      this.encounter = in.readString(this.encounter instanceof Utf8 ? (Utf8)this.encounter : null);

      this.effectiveDateTime = in.readLong();

      this.performers = in.readString(this.performers instanceof Utf8 ? (Utf8)this.performers : null);

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          break;

        case 2:
          this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
          break;

        case 3:
          this.subject = in.readString(this.subject instanceof Utf8 ? (Utf8)this.subject : null);
          break;

        case 4:
          this.encounter = in.readString(this.encounter instanceof Utf8 ? (Utf8)this.encounter : null);
          break;

        case 5:
          this.effectiveDateTime = in.readLong();
          break;

        case 6:
          this.performers = in.readString(this.performers instanceof Utf8 ? (Utf8)this.performers : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










